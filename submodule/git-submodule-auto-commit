#!/usr/bin/env bash

set -e

err() {
  echo "$@" >&2
}
usage() {
  err "Usage: git submodule-auto-commit [-a] [-m] [-n]"
  err "  -a: include unstaged changes"
  err "  -m: print generated commit message only"
  err "  -n: dry run"
  exit 1
}

include_unstaged=
commit=()
msg_only=
dry_run=()
refspec=
while getopts "amnr:" opt; do
  case $opt in
    a) include_unstaged=1; commit=(-a) ;;
    m) msg_only=1 ;;
    n) dry_run=(--dry-run) ;;
    r) refspec="$OPTARG" ;;
    *) usage ;;
  esac
done

# Remove processed options from arguments
shift $((OPTIND-1))

all=1  # Default to all if no paths specified
if [ $# -gt 0 ]; then
  all=
fi

submodules() {
  git ls-tree "$@" | awk '$2=="commit" { print $4 }' | sort
}

if [ -n "$refspec" ]; then
  if [[ $refspec == *..* ]]; then
    from="${refspec%%..*}"
    to="${refspec##*..}"
  else
    from="$refspec"
    to=HEAD
  fi
  diffs="$(comm -12 <(git diff --name-status "$refspec" | awk '$0 ~ /^M/ { print $2 }' | sort) <(submodules "$to" "$@"))"
else
  from=HEAD
  to=
  if [ -z "$include_unstaged" ] && [ "$all" == "1" ]; then
    awk_cmd='$0 ~ /^M/ { print $2 }'
  else
    awk_cmd='$0 ~ /^ M/ { print $2 }'
  fi
  diffs="$(comm -12 <(git status --short | awk "$awk_cmd" | sort) <(submodules HEAD "$@"))"
fi
# err "Changed submodules: $diffs"

if [ "${#diffs[@]}" == "0" ]; then
  err "No changed submodules found"
  exit 1
fi

run() {
  if [ -n "$msg_only" ]; then
    true
    # err "Skipping $*"
  else
    err "$*"
    "$@"
  fi
}

subj=
body=()
for sm in $diffs; do
  scc_args=()
  if [ -n "$to" ]; then
    to_sm="$(git submodule-sha "$to:$sm")"
    scc_args=("$from" "$to_sm")
  fi
  read back fwd <<< "$(git submodule-count-commits "$sm" "${scc_args[@]}" | tr -d '\-+')"
  if [ "$back" -eq 0 ] && [ "$fwd" -eq 0 ]; then
    continue
  fi
  subj+="${subj:+, }$sm"
  if [ "$back" -gt 0 ]; then
    subj+="-$back"
  fi
  if [ "$fwd" -gt 0 ]; then
    subj+="+$fwd"
  fi

  before="$(git ls-tree "$from" "$sm" | awk '{ print $3 }')"
  if [ -n "$to" ]; then
    after="$to_sm"
  else
    after="$(git ls-tree HEAD "$sm" | awk '{ print $3 }')"
  fi
  #after="$(git x "$sm" full-hash)"
  bef="$(git x "$sm" log -1 --format=%h "$before")"
  aft="$(git x "$sm" log -1 --format=%h "$after")"
  if [ "$back" -gt 0 ]; then
    body+=("- $sm:")
    spec="$bef..$aft"
    body+=("  - Gained $spec:")
    while read -r line; do
      body+=("    - $line")
    done < <(git x "$sm" log --format="%h: %s" "$spec")
    spec="$aft..$bef"
    body+=("  - Lost $spec:")
    while read -r line; do
      body+=("    - $line")
    done < <(git x "$sm" log --format="%h: %s" "$spec")
  else
    spec="$bef..$aft"
    body+=("- $sm: $spec")
    while read -r line; do
      body+=("  - $line")
    done < <(git x "$sm" log --format="%h: %s" "$spec")
  fi
  run git add "${dry_run[@]}" "$sm"
done

(
  echo "$subj"
  echo
  for line in "${body[@]}"; do
    echo "$line"
  done
) | if [ -n "$msg_only" ]; then
  cat
else
  tee /dev/stderr | run git commit "${dry_run[@]}" "${commit[@]}" -F-
fi
