#!/usr/bin/env bash

# Squash all commits since a given upstream (default $DEFAULT_REMOTE/HEAD); open $EDITOR with all commit
# messages nicely formatted/bulleted.

set -e
source "$GIT_HELPERS_HOME"/config/.helpers-rc

remote="$(git default-remote)"
if [ $# -eq 0 ]; then
  args="$remote/HEAD..HEAD"
elif [ $# -eq 1 ]; then
  if [[ ! "$1" =~ \.\. ]]; then
    args="$1..HEAD"
  else
    args="$1"
  fi
elif [ $# -eq 2 ]; then
  args="$1..$2"
else
  cat >&2 <<EOF
  Usage:

      $0               # squash from $remote/HEAD to HEAD
      $0 <from> <to>   # squash from <from> to <to>
      $0 <from>..<to>  # squash from <from> to <to>
      $0 <from>        # squash from <from> to HEAD

EOF
fi

from="${args%%..*}"
to="${args##*..}"
to_sha="$(git sha "$to")"

hashes="$(git rev-list --reverse $args)"

# Attempt to stash any local changes and set up an EXIT-trap to restore them, if any are found.
restore_stash=
if git stash-save; then
  restore_stash=1
fi
finish() {
  echo "Exiting"
  if [ -n "$restore_stash" ]; then
    echo "Restoring changes.."
    git stash pop
    echo "Done"
  fi
}
trap finish EXIT

echo "Operating from $from to $to; $(count $hashes) commits:"
echo ''
git --no-pager log --color=always --pretty --oneline --decorate --no-walk $args | awk '{ print "\t",$0 }'
echo ''
echo "Using commit message:"
echo ''
commit_message_file="$(mkt)"
cat >"$commit_message_file" <<EOF


# Below are the messages for the commits you are squashing.

EOF
git squashed-commit-message $args | tee -a "$commit_message_file"
echo ''
git reset --soft "$from"
if ! git commit -t "$commit_message_file"; then
  git reset --hard "$to_sha"
fi
