#!/usr/bin/env bash
#
# During a rebase, execute a command, and commit its contents (or amend the previous commit, with `-a`/`--amend`).
#
# e.g.:
# ```bash
# Rebase last 5 commits, run `ruff` linter, amend changes to each.
# grx 'g rxsa ruff format .' HEAD~5
# ```

set -e

# Find the git directory (handles worktrees and submodules)
GIT_DIR="$(git rev-parse --git-dir 2>/dev/null || echo .git)"

# During git rebase -x, check for the sequencer directory as well
# The sequencer/todo file exists during git rebase -x operations
if ! [ -d "$GIT_DIR/rebase-merge" ] && ! [ -d "$GIT_DIR/rebase-apply" ] && ! [ -d "$GIT_DIR/sequencer" ]; then
  echo "$0 can only be run during a rebase" >&2
  exit 1
fi

if ! git diff --exit-code; then
  echo "$0 requires a clean worktree" >&2
  exit 1
fi

amend=
if [ "$1" = -a ] || [ "$1" = --amend ]; then
  amend=1
  shift
fi

echo "$(basename "$0") executing: $*" >&2
"$@"

if ! git diff --exit-code; then
  sha="$(git log -1 --format=%h)"
  echo -n "$sha: found updated files; " >&2
  if [ -n "$amend" ]; then
    echo "amending" >&2
    git commit -a --amend --no-edit
  else
    echo "committing" >&2
    git commit -a -m '`'"$*"'`'
  fi
else
  echo "$sha: no updated files found" >&2
fi
