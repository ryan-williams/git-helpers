
defn pgr parse-github-url
defn hb hub browse
defn hpr hub pr
defn hprq hub pull-request

defn ghds github-docs-snapshot
defn ghdss github-docs-snapshot -s

defn hds github-docs-snapshot
defn hdss github-docs-snapshot -s

defn gha "gh api"
defn ghaj 'gh api -H "Accept: application/vnd.github+json"'
defn ghw github-workflows.py

github_url() {
    gh repo view --json url | jq -r '.url'
}
export -f github_url
defn ghou github_url
github_open_actions() {
    open "$(github_url)/actions"
}
export -f github_open_actions
defn ghoa github_open_actions

defn ghow gh repo view --web

github_open_web_branch() {
    gh repo view --web -b "$(git current-branch)"
}
export -f github_open_web_branch
defn ghob github_open_web_branch

defn ghr gh run
defn ghrh gh run --help
defn ghrl gh run list
defn ghrlh gh run list --help

gh_last_run_id() {
    gh run list -L 1 --json databaseId | jq -r .[0].databaseId
}
export -f gh_last_run_id
defn ghlr gh_last_run_id

defn ghrv gh run view
defn ghrvh gh run view --help
defn ghrvj gh run view --job
defn ghrvw gh run view --web
gh_run_view_jobs() {
    gh run view "$@" --json jobs
}
export -f gh_run_view_jobs
defn ghrvjs gh_run_view_jobs
defn ghrvl gh run view --log
defn ghrvlj gh run view --log --job
gh_run_view_url() {
    ghrv "$@" --json url | jr .url
}
export -f gh_run_view_url
defn ghrvu gh_run_view_url
gh_run_open() {
    url="$(gh_run_view_url "$@")"
    open "$url"
}
export -f gh_run_open
defn ghro gh_run_open

gh_last_workflow_run() {
    gh run list -L 1 --json databaseId | jq -r .[0].databaseId
}
export -f gh_last_workflow_run
defn ghlw gh_last_workflow_run
defn ghlwr gh_last_workflow_run

gh_workflow_run() {
    name="${1%.yml}"; shift
    gh workflow run $name.yml "$@"
}
export -f gh_workflow_run
defn ghwr gh_workflow_run
gh_workflow_run_current_branch() {
    name="${1%.yml}"; shift
    gh workflow run $name.yml --ref "$(git current-branch)" "$@"
}
export -f gh_workflow_run_current_branch
defn ghwrc gh_workflow_run_current_branch

defn ghwl gh workflow list

gh_run_list_in_progress() {
    gh run list -s in_progress "$@"
}
export -f gh_run_list_in_progress
defn ghwip gh_run_list_in_progress

gh_open_last() {
    run="$(gh_last_workflow_run)"
    gh run view --web $run
}
export -f gh_open_last
defn ghol gh_open_last

gh_run_and_job() {
    if [ $# -gt 0 ]; then
        run="$1"; shift
    else
        run="$(gh_last_workflow_run)"
    fi
    if [ $# -gt 0 ]; then
        job_idx="$1"; shift
    else
        job_idx=-1
    fi
    if [ $# -gt 0 ]; then
        echo 'Usage: gh_run_and_job [run_id [job_idx]]' >&2
        return 1
    fi
    gh run view "$run" --json databaseId,jobs | jq "{ run_id: .databaseId, job: .jobs[$job_idx] }"
}
export -f gh_run_and_job
defn ghraj gh_run_and_job

gh_job() {
    gh_run_and_job "$@" | jq ".job"
}
export -f gh_job
defn ghj gh_job

gh_job_id() {
    gh_last_job "$@" | jq -r .databaseId
}
export -f gh_job_id
defn ghji gh_job_id

gh_job_ids() {
    if [ $# -gt 0 ]; then
        run="$1"; shift
    else
        run="$(gh_last_workflow_run)"
    fi
    if [ $# -gt 0 ]; then
        echo 'Usage: gh_job_ids [run_id [job_idx]]' >&2
        return 1
    fi
    gh run view "$run" --json databaseId,jobs | jq -r '.databaseId as $run_id | .jobs | map([ $run_id, .databaseId ] | join(" "))[]'
}
export -f gh_job_ids
defn ghjis gh_job_ids

gh_job_url() {
    gh_job "$@" | jq -r .url
}
export -f gh_job_url
defn ghju gh_job_url

gh_open_job() {
    open "$(gh_job_url "$@")"
}
export -f gh_open_job
defn ghoj gh_open_job

defn github_remote git-find-only-remote github\.com
defn ghrn github_remote

github_remote_path() {
    git remote-path "$@" "$(github_remote)"
}
export -f github_remote_path
defn ghrp github_remote_path

github_parse_remote_and_branch() {
  if [ $# -eq 0 ]; then
    echo "Usage: github_parse_remote_and_branch <caller name> [-n] [remote] <branch>" >&2
    return 1
  fi
  caller="$1"; shift
  dry_run=
  if [ "$1" == "-n" ]; then
    dry_run=1
    shift
  fi
  if [ $# -eq 1 ]; then
    branch="$1"; shift
    remote="$(github_remote)"
    if [ -z "$remote" ]; then
      return 1
    fi
  elif [ $# -eq 2 ]; then
    remote="$1"; shift
    branch="$1"; shift
  else
    echo "Usage: $caller [-n] [remote] <branch>" >&2
    return 1
  fi
  project_id="$(git remote-path "$remote")"
}
export -f github_parse_remote_and_branch

github_maybe_api() {
  cmd=(gh api "$@")
  if [ -n "$dry_run" ]; then
    echo "Would run: ${cmd[@]}" >&2
    return
  else
    echo "Running: ${cmd[@]}" >&2
    "${cmd[@]}"
  fi
}
export -f github_maybe_api

github_set_default_branch() {
  local remote=
  local branch=
  local project_id=
  if ! github_parse_remote_and_branch github_set_default_branch "$@"; then
    return 1
  fi
  github_maybe_api "repos/$project_id" -X PATCH -F "default_branch=$branch"
}
export -f github_set_default_branch
defn ghsdb github_set_default_branch
