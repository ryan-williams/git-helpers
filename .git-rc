#!/usr/bin/env bash

# Git aliases. source me from .bashrc!

root_dir() {
  local dir=
  if [ -n "$ZSH_VERSION" ]; then
    dir="$(dirname $0)"
  else
    dir="$(dirname "${BASH_SOURCE[0]}")"
  fi

  dir="$(cd "$dir" && echo "$PWD")"
  echo "$dir"
}

export GIT_HELPERS_HOME="$(root_dir)"

# Function-definition helper used in subdirectories
define_function() {
  name="$1"
  shift
  if [ $# -eq 0 ]; then
    echo "Usage: $0 <alias name> <aliased function> [args...]" >&2
    return 1
  fi
  unalias "$name" &>/dev/null
  eval "$name() { $@ \"\$@\"; }"
  export -f "$name" > /dev/null
}
alias defn=define_function

append_to_path() {
  for arg in "$@"; do
    if [ -d "$arg" ]; then
      export PATH="$PATH:$arg"
    fi
  done
}

append_subdir_to_path() {
  for name in "$@"; do
    local module="$GIT_HELPERS_HOME/$name"
    append_to_path "$module" "$module/aliases"

    local gitrc="$module/.git-rc"
    if [ -s "$gitrc" ]; then
      source "$gitrc"
    fi

    local gitconfig="$module/.gitconfig"
    if [ -s "$gitconfig" ]; then
      git-add-global-file include.path "$gitconfig"
    fi
  done
}

# do this first, because it bootstraps the
append_subdir_to_path config

append_subdir_to_path \
  add admin aliases apply \
  bisect blame branch \
  cat-file checkout check-ignore cherry-pick clone commit conflicts \
  describe diff \
  fetch \
  git-filter-repo \
  gist github graph grep \
  help \
  lfs log ls \
  merge merge-base mv \
  nav \
  push \
  rebase reflog remote reset rev-list rm \
  show stash status submodule \
  tag \
  version \
  watchman

export o="origin"
export oh="origin/HEAD"

export u="upstream"
export uh="upstream/HEAD"

export DEFAULT_REMOTE="${DEFAULT_REMOTE:-origin}"

export h="HEAD"

# Parent commit aliases
export p="HEAD^"
export pp="HEAD^2"
export p2="HEAD~2"
export p3="HEAD~3"
export p4="HEAD~4"
export p5="HEAD~5"
export p6="HEAD~6"
export p7="HEAD~7"
export p8="HEAD~8"
export p9="HEAD~9"
export p1="HEAD~10"

# Reflog history aliases
export h1="HEAD@{1}"
export h2="HEAD@{2}"
export h3="HEAD@{3}"
export h4="HEAD@{4}"
export h5="HEAD@{5}"
export h6="HEAD@{6}"
export h7="HEAD@{7}"
export h8="HEAD@{8}"
export h9="HEAD@{9}"
export h10="HEAD@{10}"
export h11="HEAD@{11}"
export h12="HEAD@{12}"
export h13="HEAD@{13}"
export h14="HEAD@{14}"
export h15="HEAD@{15}"
export h16="HEAD@{16}"
export h17="HEAD@{17}"
export h18="HEAD@{18}"
export h19="HEAD@{19}"
export h20="HEAD@{20}"

# Stashes
export s0="stash@{0}"
export s1="stash@{1}"
export s2="stash@{2}"
export s3="stash@{3}"
export s4="stash@{4}"
export s5="stash@{5}"
export s6="stash@{6}"
export s7="stash@{7}"
export s8="stash@{8}"
export s9="stash@{9}"
export s10="stash@{10}"

export pr="$DEFAULT_REMOTE/pr"

root_setup() {
  local dir="$GIT_HELPERS_HOME"
  [ -s "$dir/.gitcomplete" ] && source "$dir/.gitcomplete"

  if [ -n "$BASH_VERSION" ]; then
    [ -s "$dir/.git-completion.bash" ] && source "$dir/.git-completion.bash"
  fi

  # Source this repository's `.gitconfig` file from your global `.gitconfig`.
  git add-global-config-file "$dir"/config/.gitconfig

  export PYTHONPATH="$PYTHONPATH:$dir/util"
}

root_setup

defn p parallel -k -j+0 --env PATH

git_set_sha() {
  export sha="$(git sha)"
}
export -f git_set_sha
alias git-set-sha=git_set_sha

export GLOBAL_GIT_IGNORE_PATH="${GLOBAL_GIT_IGNORE_PATH:-$HOME/global.gitignore}"
if [ -s "$GLOBAL_GIT_IGNORE_PATH" ]; then
  git config --global --replace-all core.excludesfile "$GLOBAL_GIT_IGNORE_PATH"
fi
