#!/usr/bin/env python

"""Mirror-push changes to a remote, forcing its local state to be identical."""

import os
import shutil
from subprocess import check_call, check_output, PIPE, Popen
import sys
from tempfile import mktemp, NamedTemporaryFile

if __name__ == '__main__':
    file_path = os.path.realpath(__file__)
    branches_dir = os.path.dirname(file_path)
    root_dir = os.path.dirname(branches_dir)
    sys.path.insert(0, root_dir)

from git_helpers.util.remotes import get_mirror_remote

remote = get_mirror_remote()

print("Got remote %s at %s. Copying .git directory to %s" % (
    remote.name,
    remote.user_host_path_str,
    remote.path
))
rsync_cmd = [ 'rsync', '-avzh', '--progress', '--delete', '.git', remote.user_host_path_str ]
print("rsync'ing: %s" % ' '.join(rsync_cmd))
print('\t%s' % '\n\t'.join(
    Popen(
        rsync_cmd,
        stdout=PIPE
    ).communicate()[0].decode().split('\n')[:20]
))
print('Copied!')


if remote.is_local:
    curdir = os.getcwd()
    os.chdir(remote.path)
    check_call(['git', 'reset', '--hard', 'HEAD'])
    os.chdir(curdir)
else:
    remote_cmd='cd "%s" && git reset --hard HEAD' % remote.path
    print('remoting: %s' % remote_cmd)
    check_call(['ssh', remote.user_host_str, remote_cmd])

names_file_path = mktemp()
try:
    with open(names_file_path, 'w') as names_file:
        print('Getting staged and unstaged file names..')
        Popen(['git', 'diff', '--name-only', 'HEAD'], stdout=names_file).wait()
        Popen(['git', 'lso'], stdout=names_file).wait()
        names_file.flush()
        names_file.write('.git/index\n')

    print('\t' + '\n\t'.join(
        Popen(
            ['rsync', '-avzh', '--progress', '--files-from=%s' % names_file_path, './', remote.path],
            stdout=PIPE
        ).communicate()[0].decode().split('\n')[:20]
    ))

finally:
    os.remove(names_file_path)


def run_cmd_on_local_and_remote(cmd, handler_fn):
    with NamedTemporaryFile() as source_untracked_files_fd, \
            NamedTemporaryFile() as dest_untracked_files_fd:

        curdir = os.getcwd()
        try:
            Popen(cmd, stdout=source_untracked_files_fd).wait()

            if remote.is_local:
                os.chdir(remote.path)
                Popen(cmd, stdout=dest_untracked_files_fd).wait()
            else:
                remote_cmd = ['ssh', remote.user_host_str, "cd %s && %s" % (remote.path, " ".join(cmd))]
                print('remoting: %s' % remote_cmd)
                Popen(remote_cmd, stdout=dest_untracked_files_fd).wait()

            source_untracked_files_fd.flush()
            dest_untracked_files_fd.flush()

            handler_fn(source_untracked_files_fd, dest_untracked_files_fd)
        finally:
            os.chdir(curdir)

def check_cmd(cmd):

    print('Verifying cmd `%s` are equal on local and remote' % ' '.join(cmd))
    def diff_files(source_fd, dest_fd):
        p = Popen(['diff', source_fd.name, dest_fd.name], stdout=PIPE, stderr=PIPE)
        if p.wait():
            out, err = p.communicate()
            raise OSError(
                "`diff %s %s` failed:\nstdout:\n%s\nstderr:\n%s" % (
                    source_fd.name,
                    dest_fd.name,
                    out.decode(),
                    err.decode()
                )
            )


    run_cmd_on_local_and_remote(cmd, diff_files)


def rm_dest_untracked_files(source_untracked_files_fd, dest_untracked_files_fd):
    cmd = [
        'comm',
        '-13',
        source_untracked_files_fd.name,
        dest_untracked_files_fd.name
    ]
    out = [ line.strip() for line in check_output(cmd).split('\n') if line ]

    if out:
        print('found untracked dest files:\n\t%s' % '\n\t'.join(out))

        if remote.is_local:
            for file in out:
                if os.path.isdir(file):
                    print('\tremoving untracked destination directory: %s' % file)
                    shutil.rmtree(file)
                elif os.path.isfile(file):
                    print('\tremoving untracked destination file: %s' % file)
                    os.remove(file)
                elif os.path.islink(file):
                    print('\tremoving untracked destination symlink: %s' % file)
                    os.unlink(file)
                else:
                    # tricky: `out` may contain directories to be deleted and files within those
                    # directories, meaning some paths may have been deleted by an upstream
                    # recursive-directory-deletion by the time we get to them; this branch feels
                    # suspicious but is actually ok. Additionally, the `isdir` and `isfile` checks
                    # above, per-path, are important for this reason.
                    pass
        else:
            remote_cmd = 'cd %s && rm -rf %s' % (remote.path, ' '.join(out))
            print('remoting: %s' % remote_cmd)
            check_output(['ssh', remote.user_host_str, remote_cmd])


run_cmd_on_local_and_remote(['git', 'lso'], rm_dest_untracked_files)

check_cmd(['git', 'diff'])
check_cmd(['git', 'diff', '--cached'])
check_cmd(['git', 'lso'])
