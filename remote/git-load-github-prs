#!/usr/bin/env bash

set -eo pipefail

err() {
  echo "$@" >&2
}

usage() {
  err "$0 [-d] [-n] [-r remote] [pr-number...]"
  err
  err "  -d: Delete existing PR fetch mappings"
  err "  -n: Dry run"
  err "  -r: Remote name (default: $(git default-remote))"
  exit 1
}

delete=
dry_run=
remote=
while getopts "dnr:" opt; do
  case $opt in
    d) delete=1 ;;
    n) dry_run=1 ;;
    r) remote="$OPTARG" ;;
    \?) usage ;;
    :)
      err "Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

default=
if [ -z "$remote" ]; then
  remote="$(git default-remote)"
  if [ -z "$remote" ]; then
    err "No remote passed and no default remote found"
    exit 1
  fi
  default=1
fi

if [ $# -eq 0 ]; then
  set -- '*'
fi

run() {
  if [ -n "$dry_run" ]; then
    err "Would run: $*"
  else
    err "Running: $*"
    "$@"
  fi
}

k="remote.$remote.fetch"
for arg in "$@"; do
  if [ -z "$default" ]; then
    v="refs/remotes/$remote/pr/$arg"
  else
    v="refs/remotes/pr/$arg"
  fi
  kv="+refs/pull/$arg/head:$v"
  mapfile -t configs < <(git config --get-all "$k")
  found=
  for config in "${configs[@]}"; do
    if [ "$config" = "$v" ]; then
      err "Mapping for $config already present in remote $remote"
      found=1
      break
    fi
  done
  if [ -n "$found" ]; then
    continue
  fi
  if [ -n "$delete" ]; then
    esc="$kv"
    esc="${esc//+/\\+}"
    esc="${esc//\*/\\*}"
    run git config --unset "$k" "$esc"
    git_dir="$(git rev-parse --git-dir)"
    run rm "$git_dir/$v"
  else
    run git config --add "$k" "$kv"
  fi
done
git fetch --prune "$remote"
